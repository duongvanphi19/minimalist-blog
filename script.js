function toggleDarkMode() {
  document.body.classList.toggle("dark-mode");

  // L∆∞u tr·∫°ng th√°i trong localStorage
  if (document.body.classList.contains("dark-mode")) {
    localStorage.setItem("darkMode", "enabled");
  } else {
    localStorage.setItem("darkMode", "disabled");
  }
}
// H√†m chuy·ªÉn ƒë·ªïi Dark Mode
document.addEventListener("DOMContentLoaded", function () {
    loadPosts();
    if (localStorage.getItem("darkMode") === "enabled") {
    document.body.classList.add("dark-mode");
  }
    
    const params = new URLSearchParams(window.location.search);
    const postFile = params.get("post");

    if (!postFile) {
        document.getElementById("post-list").innerHTML = "<p>B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i.</p>";
        return;
    }

    const xhr = new XMLHttpRequest();
    xhr.open("GET", `posts/${postFile}.md`, true);
    
    xhr.onload = function () {
        if (xhr.status >= 200 && xhr.status < 300) {
            let markdown = xhr.responseText;

            //console.log( markdown); // üîç Ki·ªÉm tra n·ªôi dung tr·∫£ v·ªÅ

            // N·∫øu n·ªôi dung b·∫Øt ƒë·∫ßu b·∫±ng <!DOCTYPE html>, nghƒ©a l√† ƒëang l·∫•y nh·∫ßm file HTML
            if (markdown.startsWith("<!DOCTYPE html>")) {
                document.getElementById("post-content").innerHTML = "<p>L·ªói: T·∫£i nh·∫ßm file HTML thay v√¨ Markdown.</p>";
                return;
            }
            // Lo·∫°i b·ªè YAML Front Matter
            markdown = markdown.replace(/^---[\s\S]+?---\s*/, '').trim();
            // Chuy·ªÉn ƒë·ªïi Markdown th√†nh HTML
            marked.setOptions({
            breaks: true, // Xu·ªëng d√≤ng ƒë√∫ng c√°ch
            smartLists: true, // C·∫£i thi·ªán danh s√°ch
            smartypants: true, // Chuy·ªÉn ƒë·ªïi k√Ω t·ª± ƒë·∫∑c bi·ªát
            gfm: true, // H·ªó tr·ª£ GitHub Flavored Markdown
            renderer: new marked.Renderer()
        });
            document.getElementById("post-content").innerHTML = marked.parse(markdown);
        } else {
            document.getElementById("post-content").innerHTML = "<p>L·ªói khi t·∫£i b√†i vi·∫øt.</p>";
        }
    };
    xhr.onerror = function () {
        document.getElementById("post-content").innerHTML = "<p>L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.</p>";
    };

    xhr.send();
    
  
});

document.addEventListener("DOMContentLoaded", async function () {
    const blogList = document.getElementById("post-list");
    const featuredList = document.getElementById("featured-list");
    const searchInput = document.getElementById("searchInput");
    const searchButton = document.getElementById("searchButton");
    const categoryFilter = document.getElementById("categoryFilter");

  if (!blogList || !searchInput || !searchButton || !categoryFilter) {
        console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ c·∫ßn thi·∫øt trong DOM.");
        console.log(blogList, searchInput, searchButton, categoryFilter);
    }
    let posts = [];

    try {
        // üîπ Fetch danh s√°ch b√†i vi·∫øt t·ª´ posts.json
        const response = await fetch("posts.json");
        posts = await response.json();

        // üîπ L·∫•y danh s√°ch danh m·ª•c (tags)
        const uniqueTags = new Set();
        posts.forEach(post => post.tags.forEach(tag => uniqueTags.add(tag)));

        // üîπ Th√™m danh m·ª•c v√†o dropdown filter
        uniqueTags.forEach(tag => {
            const option = document.createElement("option");
            option.value = tag;
            option.textContent = tag;
            categoryFilter.appendChild(option);
        });

        // üîπ Hi·ªÉn th·ªã danh s√°ch b√†i vi·∫øt ban ƒë·∫ßu
        renderPosts(posts);

    } catch (error) {
        blogList.innerHTML = "<p class='error-message'>L·ªói khi t·∫£i danh s√°ch b√†i vi·∫øt.</p>";
        console.error("L·ªói:", error);
    }
    
    // üîπ Hi·ªÉn th·ªã b√†i vi·∫øt n·ªïi b·∫≠t
        const featuredPosts = posts.filter(post => post.featured);
        if (featuredPosts.length > 0) {
            featuredList.innerHTML = featuredPosts.map(post => `
                <article class="featured">
                    <h3><a href="post.html?post=${post.file}">${post.title}</a></h3>
                    <p>${post.description}</p>
                </article>
            `).join("");
        } else {
            featuredList.innerHTML = "<p>Ch∆∞a c√≥ b√†i vi·∫øt n·ªïi b·∫≠t.</p>";
        }

    // üîπ H√†m hi·ªÉn th·ªã b√†i vi·∫øt
    function renderPosts(filteredPosts) {
        if (filteredPosts.length === 0) {
            blogList.innerHTML = "<p class='no-results'>Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o.</p>";
            return;
        }

        blogList.innerHTML = filteredPosts.map(post => `
            <article>
                <h2><a href="post.html?post=${post.file}">${post.title}</a></h2>
                <p><strong>Ng√†y ƒëƒÉng:</strong> ${post.date}</p>
                <p>${post.description}</p>
                <p><strong>Danh m·ª•c:</strong> ${post.tags.join(", ")}</p>
            </article>
        `).join("");
    }

    // üîπ H√†m l·ªçc b√†i vi·∫øt d·ª±a tr√™n t√¨m ki·∫øm v√† danh m·ª•c
    function filterPosts() {
        const searchTerm = searchInput.value.toLowerCase();
        const selectedCategory = categoryFilter.value;

        let filteredPosts = posts.filter(post => 
            post.title.toLowerCase().includes(searchTerm) || 
            post.description.toLowerCase().includes(searchTerm) || 
            post.tags.some(tag => tag.toLowerCase().includes(searchTerm))
        );

        if (selectedCategory !== "all") {
            filteredPosts = filteredPosts.filter(post => post.tags.includes(selectedCategory));
        }

        renderPosts(filteredPosts);
    }

    // üîπ X·ª≠ l√Ω t√¨m ki·∫øm khi b·∫•m n√∫t
    searchButton.addEventListener("click", filterPosts);

    // üîπ X·ª≠ l√Ω l·ªçc theo danh m·ª•c
    categoryFilter.addEventListener("change", filterPosts);
});

// ƒêƒÉng k√Ω s·ª± ki·ªán cho n√∫t toggle
document.getElementById("darkModeToggle").addEventListener("click", toggleDarkMode);

async function loadPosts() {
  
    const blogList = document.getElementById("post-list");
    try {
        // üîπ Fetch danh s√°ch b√†i vi·∫øt t·ª´ posts.json
        const response = await fetch("posts.json");
        const posts = await response.json();

        // üîπ Hi·ªÉn th·ªã danh s√°ch b√†i vi·∫øt
        blogList.innerHTML = posts.map(post => `
            <article>
                <h2><a href="post.html?post=${post.file}">${post.title}</a></h2>
                <p><strong>Ng√†y ƒëƒÉng:</strong> ${post.date}</p>
                <p>${post.description}</p>
            </article>
        `).join("");
    } catch (error) {
        blogList.innerHTML = "<p>L·ªói khi t·∫£i danh s√°ch b√†i vi·∫øt.</p>";
        console.error("L·ªói:", error);
    }

};
