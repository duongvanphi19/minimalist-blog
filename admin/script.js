

document.getElementById("imageUpload").addEventListener("change", function (event) {
    const file = event.target.files[0];

    // N·∫øu kh√¥ng ch·ªçn file th√¨ reset l·∫°i to√†n b·ªô
    if (!file) {
        resetUploadForm();
        return;
    }

    // Hi·ªÉn th·ªã ·∫£nh preview
    const reader = new FileReader();
    reader.onload = function (e) {
        const preview = document.getElementById("imagePreview");
        preview.src = e.target.result;
        preview.style.display = "block";
    };
    reader.readAsDataURL(file);

    // C·∫≠p nh·∫≠t n·ªôi dung checkbox
    const useDefaultNameLabel = document.querySelector("label[for='useDefaultName']");
    useDefaultNameLabel.innerText = `S·ª≠ d·ª•ng t√™n '${file.name}'`;

    // Hi·ªÉn th·ªã c√°c t√πy ch·ªçn upload
    document.getElementById("uploadOptions").classList.remove("hidden");
});

// H√†m reset khi ch·ªçn ·∫£nh kh√°c
function resetUploadForm() {
    document.getElementById("imagePreview").style.display = "none";
    document.getElementById("uploadOptions").classList.add("hidden");
    document.getElementById("imageUpload").value = ""; // Reset input file
}

document.getElementById("uploadButton").addEventListener("click", uploadImage);

document.addEventListener("DOMContentLoaded", () => {
    loadPosts();
    
    if (localStorage.getItem("darkMode") === "enabled") {
    document.body.classList.add("dark-mode");
  }
  

// ƒêƒÉng k√Ω s·ª± ki·ªán cho n√∫t toggle
document.getElementById("darkModeToggle").addEventListener("click", toggleDarkMode);

document.getElementById("newPostButton").addEventListener("click", newPost);
});

function toggleDarkMode() {
  document.body.classList.toggle("dark-mode");

  // L∆∞u tr·∫°ng th√°i trong localStorage
  if (document.body.classList.contains("dark-mode")) {
    localStorage.setItem("darkMode", "enabled");
  } else {
    localStorage.setItem("darkMode", "disabled");
  }
}

// S·ª± ki·ªán checkbox: n·∫øu ƒë∆∞·ª£c ch·ªçn, disable input t√™n ·∫£nh
document.getElementById("useDefaultName").addEventListener("change", function () {
  const imageNameInput = document.getElementById("imageNameInput");
  imageNameInput.disabled = this.checked;
});

// S·ª± ki·ªán xem tr∆∞·ªõc ·∫£nh khi ch·ªçn file
document.getElementById("imageUpload").addEventListener("change", function (event) {
  const file = event.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function (e) {
    const preview = document.getElementById("imagePreview");
    preview.src = e.target.result;
    preview.style.display = "block";
  };
  document.getElementById("extensionLabel").innerHTML= "." + file.name.split(".").pop().toLowerCase();
  reader.readAsDataURL(file);
});

// H√†m t·∫°o slug t·ª´ chu·ªói (lo·∫°i b·ªè d·∫•u, chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng, ƒë·ªïi kho·∫£ng tr·∫Øng th√†nh d·∫•u -)
function createSlug(title) {
  return title
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/ƒë/g, "d")
    .replace(/[^a-z0-9\s-]/g, "")
    .trim()
    .replace(/\s+/g, "-");
}

// S·ª± ki·ªán n√∫t upload ·∫£nh
document.getElementById("uploadButton").addEventListener("click", uploadImage);

async function uploadImage() {
  const fileInput = document.getElementById("imageUpload");
  const file = fileInput.files[0];
  if (!file) {
    log("‚ùå Vui l√≤ng ch·ªçn m·ªôt ·∫£nh!");
    return;
  }
  
  document.getElementById("uploadButton").textContent = "Uploading...";

  // L·∫•y extension c·ªßa file
  const extension = file.name.split(".").pop().toLowerCase();
  
  // N·∫øu checkbox "useDefaultName" ƒë∆∞·ª£c check, d√πng t√™n file g·ªëc (ƒë√£ chuy·ªÉn slug)
  // Ng∆∞·ª£c l·∫°i, l·∫•y t√™n t·ª´ input (v√† chuy·ªÉn slug)
 
  let baseName = "";
  if (document.getElementById("useDefaultName").checked) {
    baseName = file.name.substring(0, file.name.lastIndexOf("."));
  } else {
    baseName = document.getElementById("imageNameInput").value;
    if (!baseName) {
      log("‚ùå Vui l√≤ng nh·∫≠p t√™n ·∫£nh!");
      return;
    }
  }
  const slugName = createSlug(baseName);
  const filename = `assets/uploads/${slugName}.${extension}`;

  // ƒê·ªçc file v√† chuy·ªÉn th√†nh Base64
  const reader = new FileReader();
  reader.readAsDataURL(file);
  reader.onload = async function () {
    const base64Content = reader.result.split(",")[1]; // L·∫•y ph·∫ßn d·ªØ li·ªáu base64 sau d·∫•u ,

    // C·∫•u h√¨nh th√¥ng tin GitHub
    const token = atob("dG9rZW4gZ2hwX0xreG5ZWDJaWVpqNkRicE1zZ2kwZ2kzSnNXSkw5UjEySEtiVw=="); // Thay b·∫±ng token c·ªßa b·∫°n (ƒë√£ m√£ h√≥a)
    const repo = "duongvanphi19/minimalist-blog"; // Thay b·∫±ng repo c·ªßa b·∫°n
    const url = `https://api.github.com/repos/${repo}/contents/${filename}`;

    // Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i ch∆∞a
    let sha = null;
    const checkFile = await fetch(url, { headers: { Authorization: token } });
    if (checkFile.ok) {
      const fileData = await checkFile.json();
      sha = fileData.sha;
    }

    // G·ª≠i y√™u c·∫ßu PUT ƒë·ªÉ upload file ·∫£nh
    const response = await fetch(url, {
      method: "PUT",
      headers: {
        Authorization: token,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        message: "Upload ·∫£nh m·ªõi",
        content: base64Content,
        sha: sha || undefined
      })
    });

    const result = await response.json();
    if (response.ok) {
      const absoluteUrl = result.content.download_url;
      // ƒê∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi gi·∫£ ƒë·ªãnh l√† ph·∫ßn sau d·∫•u "repos/<repo>/contents"
      const relativeUrl = `/${filename}`;
      log("‚úÖ ·∫¢nh ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng!");
      // Hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n ƒë·ªÉ ng∆∞·ªùi d√πng copy
      document.getElementById("uploadPaths").innerHTML = `
        <h3><strong>Path:</strong></h3>
        <p> <input type="text" value="${absoluteUrl}" readonly style="width:100%;"></p>
        <p> <input type="text" value="${relativeUrl}" readonly style="width:100%;"></p>
      `;
      // T·ª± ch√®n markdown c·ªßa ·∫£nh v√†o editor
      //insertImageMarkdown(absoluteUrl);
      document.getElementById("uploadButton").textContent = "‚úÖ"
    } else {
      log("‚ùå L·ªói khi upload ·∫£nh: " + result.message);
    }
  };
}

// H√†m ch√®n markdown c·ªßa ·∫£nh v√†o v·ªã tr√≠ con tr·ªè trong editor
function insertImageMarkdown(imageUrl) {
  const editor = document.getElementById("markdownEditor");
  const cursorPos = editor.selectionStart;
  const textBefore = editor.value.substring(0, cursorPos);
  const textAfter = editor.value.substring(cursorPos);
  editor.value = `${textBefore} ![H√¨nh ·∫£nh](${imageUrl}) ${textAfter}`;
  updatePreview();
}

// H√†m c·∫≠p nh·∫≠t preview s·ª≠ d·ª•ng marked.js (ƒë√£ ƒë∆∞·ª£c load t·ª´ CDN)

function insertImageMarkdown(imageUrl) {
    const editor = document.getElementById("markdownEditor");
    const cursorPos = editor.selectionStart;
    const textBefore = editor.value.substring(0, cursorPos);
    const textAfter = editor.value.substring(cursorPos);
    editor.value = `${textBefore} ![H√¨nh ·∫£nh](${imageUrl}) ${textAfter}`;
    updatePreview();
}

function createSlug(title) {
    return title
        .toLowerCase() // Chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng
        .normalize("NFD") // T√°ch d·∫•u kh·ªèi k√Ω t·ª± g·ªëc (v√≠ d·ª•: "√°" ‚Üí "a")
        .replace(/[\u0300-\u036f]/g, "") // X√≥a d·∫•u
        .replace(/ƒë/g, "d") // ƒê·ªïi "ƒë" th√†nh "d"
        .replace(/[^a-z0-9\s-]/g, "") // X√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát (gi·ªØ l·∫°i ch·ªØ, s·ªë, d·∫•u c√°ch)
        .trim() // X√≥a kho·∫£ng tr·∫Øng ƒë·∫ßu & cu·ªëi
        .replace(/\s+/g, "-"); // ƒê·ªïi kho·∫£ng tr·∫Øng th√†nh d·∫•u "-"
}

function generateID(){
  return Date.now().toString();
}

function newPost() {
    const title = "new";

    const slug = createSlug(title);
    const content = `---
id: ""
title: "${title}"
date: "${new Date().toISOString().split("T")[0]}"
author: ""
description: "Lorem ipsum dolor sit atmet"
tags: []
image: "/assets/uploads/sample.jpg"
featured: "false"
slug: "${slug}"
filename: "${slug}.md"
status: "published"
---

N·ªôi dung b√†i vi·∫øt t·∫°i ƒë√¢y...
`;

    document.getElementById("markdownEditor").value = content;
    document.getElementById("editor").style.display = "block";
    
    updatePreview();

    document.getElementById("saveButton").onclick = () => savePost();
}

// üìù T·∫£i danh s√°ch b√†i vi·∫øt t·ª´ GitHub

async function loadPosts() {
  
    const postsFile = `https://api.github.com/repos/duongvanphi19/minimalist-blog/contents/posts.json`
    //const url = '/.netlify/functions/savePost';
    const token = atob("dG9rZW4gZ2hwX0xreG5ZWDJaWVpqNkRicE1zZ2kwZ2kzSnNXSkw5UjEySEtiVw==")

    // üõë L·∫•y n·ªôi dung hi·ªán t·∫°i c·ªßa `posts.json`
    const response = await fetch(postsFile, { headers: { Authorization: token } });

    if (!response.ok) {
        log("‚õî L·ªói khi t·∫£i `posts.json`!");
        return;
    }
    let postsData = await response.json();
    let posts =[];
    //log(decodeBase64(postsData.content))
    
    try{ 
      posts = JSON.parse(decodeBase64(postsData.content));
    //console.log('decodeBase64 postsData ok')
    }catch(e){
      console.log(e)
    }
    console.log(posts)
    filterPosts(posts, "all");
    document.querySelectorAll("input[name='filter']").forEach(radio => {
            radio.addEventListener("change", (e) => {
                filterPosts(posts,e.target.value);
            });       
}); 
    
}


function filterPosts(posts, status) {
     
            const filteredPosts = status === "all" ? posts : posts.filter(post => post.status === status);
          
           //console.log(filteredPosts)
           const postList = document.getElementById("blog-list");
        postList.innerHTML = "";
        filteredPosts.forEach(post => {
        const postItem = document.createElement("div");
        
        postItem.innerHTML = `<span style="margin-right:6px;">${post.status === "published" ? '‚úÖ' : '‚¨ú'}</span><a href="#editHere" onclick="editPost('${post.filename}')">${post.filename}</a>`;
        postList.appendChild(postItem);
    });
        }
        
function extractMetadata(markdown) {
    const yamlRegex = /^---\n([\s\S]+?)\n---\n/;
    const match = markdown.match(yamlRegex);
    let metadata = {};
    let content = markdown;

    if (match) {
        metadata = parseYAML(match[1]);
        content = markdown.replace(yamlRegex, "").trim();
    }

    return { metadata, content };
}
function parseYAML(yamlText) {
    const lines = yamlText.split("\n");
    const result = {};

    lines.forEach(line => {
        const [key, ...value] = line.split(": ");
        
          if (key && value.length) {
            let val = value.join(": ").trim();
          
          if (val.startsWith('"') && val.endsWith('"')){
              val = val.slice(1,-1);
            }

            // N·∫øu l√† m·ªôt danh s√°ch (array)
            if (val.startsWith("[") && val.endsWith("]")) {
                try {
                  //console.log(val);
                    val = JSON.parse(val.replace(/'/g, '"')); // Chuy·ªÉn YAML array th√†nh JSON array h·ª£p l·ªá
                } catch (error) {
                    console.warn("L·ªói khi parse YAML array:", error);
                    val = []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu l·ªói
                }
            }

            result[key.trim()] = val;
        }
    });
   // log(json.stringify(result))
    return result;
}

// ‚úèÔ∏è Ch·ªânh s·ª≠a b√†i vi·∫øt
function FrontMatter(markdown){
  //content = markdown.replace(/^---[\s\S]+?---\s*/, '').trim();
  const {metadata, content} = extractMetadata(markdown);
  
  const head = `
  # ${metadata.title}
  ![${metadata.title}](../${metadata.image})
  
  `;
 
 
  return content;
}

async function editPost(filename, newContent=null) {
  //console.log("editpost")
    const response = await fetch(`https://raw.githubusercontent.com/duongvanphi19/minimalist-blog/main/posts/${filename}`);
    //console.log(response)
    if (!response.ok) {
        console.error("Kh√¥ng th·ªÉ t·∫£i b√†i vi·∫øt.");
        return;
    }
    const markdown = await response.text();
  
    document.getElementById("markdownEditor").value = markdown;
    updatePreview();
    document.getElementById("editor").style.display = "block";
    document.getElementById("saveButton").onclick = () => savePost();
}

function encodeBase64(str) {
    return btoa(unescape(encodeURIComponent(str)));
}

function decodeBase64(base64Str) {
    return decodeURIComponent(escape(atob(base64Str)));
}

async function savePost() {
    function encodeBase64(str) {
        return btoa(unescape(encodeURIComponent(str)));
    }
    const markdown = document.getElementById("markdownEditor").value
    const { metadata, content } = extractMetadata(markdown);
    filename = metadata.slug + ".md"
    //sua metadata 
    // N·∫øu ch∆∞a c√≥ id, t·∫°o m·ªõi
    if (!metadata.id) {
        metadata.id = generateID();
    }
    //metadata.filename=filename
    // L∆∞u to√†n b·ªô n·ªôi dung sau YAML v√†o metadata.body ƒë·ªÉ so s√°nh
    //metadata.body = content;
    
    const getFileResponse = await fetch(`https://api.github.com/repos/duongvanphi19/minimalist-blog/contents/posts/${filename}`);
    const fileExists = getFileResponse.ok;
    const sha = fileExists ? (await getFileResponse.json()).sha : undefined;

    // S·ª≠a l·ªói extra double quote ·ªü d√≤ng description
    const newContent = `---
id: "${metadata.id}"
title: "${metadata.title}"
date: "${metadata.date}"
author: "${metadata.author}"
description: "${metadata.description}"
tags: ${JSON.stringify(metadata.tags)}
image: "${metadata.image}"
featured: "${metadata.featured}"
slug: "${metadata.slug}"
filename: "${metadata.slug}.md"
status: "${metadata.status}"
---
${content}`;

    const data = {
        message: fileExists ? "C·∫≠p nh·∫≠t b√†i vi·∫øt" : "T·∫°o b√†i vi·∫øt m·ªõi",
        content: encodeBase64(newContent),
        sha: sha
    };

    const url = `https://api.github.com/repos/duongvanphi19/minimalist-blog/contents/posts/${filename}`;
    const token = atob("dG9rZW4gZ2hwX0xreG5ZWDJaWVpqNkRicE1zZ2kwZ2kzSnNXSkw5UjEySEtiVw==");
    const response = await fetch(url, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json",
            "Authorization": token
        },
        body: JSON.stringify(data)
    });
    if (response.ok) {
        log(`‚úÖ ${fileExists ? "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!" : "B√†i vi·∫øt m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o!"}`,"success");
        document.getElementById("markdownEditor").value = newContent;
        console.log(newContent)
        try {
            await updatePostsJson(filename, metadata);
        } catch (e) {
            console.log(e);
        }
    } else {
        alert("‚õî L·ªói khi l∆∞u b√†i vi·∫øt.");
    }
}
async function updatePostsJson(filename, metadata) {
    const postsFile = `https://api.github.com/repos/duongvanphi19/minimalist-blog/contents/posts.json`
    //const url = '/.netlify/functions/savePost';
    const token = atob("dG9rZW4gZ2hwX0xreG5ZWDJaWVpqNkRicE1zZ2kwZ2kzSnNXSkw5UjEySEtiVw==")

    // üõë L·∫•y n·ªôi dung hi·ªán t·∫°i c·ªßa `posts.json`
    const response = await fetch(postsFile, { headers: { Authorization: token } });

    if (!response.ok) {
        log("‚õî L·ªói khi t·∫£i `posts.json`!");
        return;
    }
    
    
    const postsData = await response.json();
    //console.log("postsData", postsData.content)
    
    let posts =[];
    //log(decodeBase64(postsData.content))
    
    try{ 
      posts = JSON.parse(decodeBase64(postsData.content));
    //console.log('decodeBase64 postsData ok')
    }catch(e){
      console.log(e)
    }
    //console.log('posts', posts);
    // üõë Ki·ªÉm tra xem b√†i vi·∫øt ƒë√£ c√≥ trong danh s√°ch ch∆∞a
    const newItem = {
            id: metadata.id,
            title: metadata.title,
            date: metadata.date,
            author: metadata.author,
            description: metadata.description,
            tags: metadata.tags,
            image: metadata.image,
            slug: metadata.slug,
            filename: metadata.filename,
            featured: metadata.featured,
            status: metadata.status
        }
    //console.log(JSON.stringify(posts, null,2));
    const exists = posts.some(post => post.id === metadata.id);
    const index = posts.findIndex(post => post.id === metadata.id)
    

    //console.log(posts[0].filename, newItem.filename)
    
    if (exists && metadata.slug === posts[index].slug) { //can cap nhat
      if (JSON.stringify(posts[index]) !== JSON.stringify(metadata) )//co thay doi
      {
        posts[index] = metadata;
        log("‚úÖ `posts.json` ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!", "success")
      }
      else{ //
        log(" `posts.json` kh√¥ng c·∫ßn c·∫≠p nh·∫≠t!")
        return;
      }
    }
    else{ 
      
      // bai viet chua ton tai
        log("üìÇ ƒêang th√™m b√†i vi·∫øt moi v√†o `posts.json`...", "success");
        posts.push(metadata);
        
        console.log("newItem", metadata)
        console.log('posts', posts);
        //posts.push(newItem);
        
}
        const updatedPosts = encodeBase64(JSON.stringify(posts, null, 2));
        //console.log("updatedPosts", updatedPosts)
        
        // ‚úÖ C·∫≠p nh·∫≠t `posts.json` tr√™n GitHub
        await fetch(postsFile, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Authorization": token
            },
            body: JSON.stringify({
                message: "C·∫≠p nh·∫≠t danh s√°ch b√†i vi·∫øt",
                content: updatedPosts,
                sha: postsData.sha
            })
        });

    
        
        //log("üìú B√†i vi·∫øt ƒë√£ t·ªìn t·∫°i trong `posts.json`, kh√¥ng c·∫ßn c·∫≠p nh·∫≠t.");
    
}
// üíæ L∆∞u b√†i vi·∫øt l√™n GitHub

// Th√™m th∆∞ vi·ªán marked.js ƒë·ªÉ hi·ªÉn th·ªã Markdown
const loadScript = (url, callback) => {
    const script = document.createElement("script");
    script.src = url;
    script.onload = callback;
    document.head.appendChild(script);
};

loadScript("https://cdn.jsdelivr.net/npm/marked/marked.min.js", () => {
  marked.setOptions({
    gfm: true, // B·∫≠t ch·∫ø ƒë·ªô GitHub Flavored Markdown
    breaks: true, // Xu·ªëng d√≤ng v·ªõi d·∫•u xu·ªëng d√≤ng b√¨nh th∆∞·ªùng
    tables: true, // H·ªó tr·ª£ b·∫£ng
    smartLists: true, // T·ª± ƒë·ªông nh·∫≠n di·ªán danh s√°ch th√¥ng minh
    smartypants: true, // T·ª± ƒë·ªông thay th·∫ø d·∫•u nh√°y & k√Ω t·ª± ƒë·∫∑c bi·ªát
});
});




// X·ª≠ l√Ω Live Edit
let timeout;
document.getElementById("markdownEditor").addEventListener("input", function () {
    clearTimeout(timeout);
    timeout = setTimeout(updatePreview, 300); // Ch·ªù 300ms tr∆∞·ªõc khi c·∫≠p nh·∫≠t
});

function updatePreview(){
  
  const markdownText = document.getElementById("markdownEditor").value;
  document.getElementById("previewContent").innerHTML = marked.parse(FrontMatter(markdownText));
}
// Hi·ªÉn th·ªã Editor + Xem tr∆∞·ªõc khi ch·ªânh s·ª≠a b√†i vi·∫øt

function log(message, type="") {
  const toastContainer = document.getElementById("toast-container");
  const toast = document.createElement("div");
  toast.className = `toast ${type}`;
  if(type === "error"){
  toast.innerText = `‚õî ${message}`;
  }
  else if (type === "success"){
  toast.innerText = `‚úÖ ${message}`;
  }
  else{
  toast.innerText = `‚ÑπÔ∏è ${message}`;
  }

  toastContainer.appendChild(toast);

  setTimeout(() => {
    toast.style.opacity = "0";  // L√†m m·ªù tr∆∞·ªõc
    setTimeout(() => toast.remove(), 500); // X√≥a sau khi hi·ªáu ·ª©ng ch·∫°y xong
  }, 4500); // Hi·ªÉn th·ªã trong 2.5 gi√¢y, 0.5 gi√¢y fade out
}
log("box-sh adow: 0 2px 5px ,0,0.1);", "error")
log("box-sh adow: 0 2px 5px ,0,0.1);", "success")
log("box-sh adow: 0 2px 5px ,0,0.1);", "")

